// filepath: e:\_BACKUP\Documents\Belajar Pemrograman\PDFChat\app\static\js\conversation.js
document.addEventListener('DOMContentLoaded', function() {
    // References to DOM elements
    const chatMessages = document.getElementById('chatMessages');
    const userInput = document.getElementById('userInput');
    const sendButton = document.getElementById('sendButton');
    const pdfViewerCol = document.getElementById('pdfViewerCol');
    const pdfContent = document.getElementById('pdfContent');
    const zoomIn = document.getElementById('zoomIn');
    const zoomOut = document.getElementById('zoomOut');
    const toggleFullscreen = document.getElementById('toggleFullscreen');
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    const pageIndicator = document.getElementById('pageIndicator');
    const clearChat = document.getElementById('clearChat');
    const exportChat = document.getElementById('exportChat');
    const attachFile = document.getElementById('attachFile');
    
    // PDF Viewer variables
    let scale = 1.0;
    let currentPage = 1;
    let pdfInstance = null;
    let totalPages = 0;
    
    // Chat variables
    let chatHistory = [];
    let isProcessing = false;
    
    // Get document_id from the URL or data attribute
    const documentId = document.body.getAttribute('data-document-id') || 'sample1';

    // Handle mobile view PDF toggle
    const togglePdfMobile = document.getElementById('togglePdfMobile');
    if (togglePdfMobile) {
        togglePdfMobile.addEventListener('click', function() {
            if (pdfViewerCol.classList.contains('d-none')) {
                pdfViewerCol.classList.remove('d-none');
                this.innerHTML = '<i class="fas fa-times"></i> Hide PDF';
            } else {
                pdfViewerCol.classList.add('d-none');
                this.innerHTML = '<i class="fas fa-file-pdf"></i> Show PDF';
            }
        });
    }

    // Adjust layout for different screen sizes
    function handleResponsiveLayout() {
        const isMobile = window.innerWidth < 992;
        const pdfControlsMobile = document.querySelector('.pdf-controls-mobile');
        
        if (isMobile) {
            // Mobile view
            pdfControlsMobile.classList.remove('d-none');
            pdfControlsMobile.classList.add('d-flex');
            
            // Check if PDF view was previously hidden
            if (window.localStorage.getItem('pdfHiddenOnMobile') === 'true') {
                pdfViewerCol.classList.add('d-none');
                togglePdfMobile.innerHTML = '<i class="fas fa-file-pdf"></i> Show PDF';
            }
        } else {
            // Desktop view
            pdfControlsMobile.classList.add('d-none');
            pdfControlsMobile.classList.remove('d-flex');
            pdfViewerCol.classList.remove('d-none');
        }
    }
    
    // Load PDF with PDF.js if it's available
    function loadPdf(pdfUrl = '/static/uploads/sample.pdf') {
        if (typeof pdfjsLib !== 'undefined') {
            // Show loading indicator
            pdfContent.innerHTML = `
                <div class="pdf-loading d-flex flex-column align-items-center justify-content-center w-100 h-100">
                    <div class="spinner mb-3">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                    </div>
                    <p>Loading document...</p>
                </div>
            `;
            
            // Using PDF.js to render the PDF
            const loadingTask = pdfjsLib.getDocument(pdfUrl);

            loadingTask.promise.then(function(pdf) {
                pdfInstance = pdf;
                totalPages = pdf.numPages;
                updatePageIndicator();
                renderPage(currentPage);
                
                // Enable/disable pagination buttons
                updatePaginationButtons();
            }).catch(function(error) {
                console.error('Error loading PDF:', error);
                pdfContent.innerHTML = `
                    <div class="alert alert-danger m-3">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Failed to load PDF: ${error.message}
                    </div>`;
            });
        } else {
            // Fallback to showing an image placeholder
            pdfContent.innerHTML = `
                <div class="d-flex flex-column align-items-center justify-content-center w-100 h-100">
                    <i class="fas fa-file-pdf fa-3x mb-3 text-danger"></i>
                    <p>PDF Viewer not available</p>
                    <p class="small text-muted">Please install PDF.js to view documents</p>
                </div>`;
        }
    }

    // Render a specific page of the PDF
    function renderPage(pageNumber) {
        if (!pdfInstance) return;
        
        // Show loading spinner inside the current canvas area
        const loadingOverlay = document.createElement('div');
        loadingOverlay.className = 'position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center';
        loadingOverlay.innerHTML = '<i class="fas fa-spinner fa-spin fa-2x"></i>';
        loadingOverlay.style.backgroundColor = 'rgba(0,0,0,0.2)';
        
        if (pdfContent.querySelector('canvas')) {
            const canvasContainer = document.createElement('div');
            canvasContainer.className = 'position-relative';
            canvasContainer.appendChild(pdfContent.querySelector('canvas'));
            canvasContainer.appendChild(loadingOverlay);
            pdfContent.innerHTML = '';
            pdfContent.appendChild(canvasContainer);
        }

        pdfInstance.getPage(pageNumber).then(function(page) {
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            const viewport = page.getViewport({ scale: scale });

            canvas.height = viewport.height;
            canvas.width = viewport.width;

            // Clear the pdfContent div and add the canvas
            pdfContent.innerHTML = '';
            pdfContent.appendChild(canvas);

            // Render the PDF page on the canvas with animation
            canvas.style.opacity = '0';
            canvas.style.transform = 'scale(0.98)';
            
            const renderContext = {
                canvasContext: context,
                viewport: viewport
            };

            const renderTask = page.render(renderContext);
            renderTask.promise.then(() => {
                // Fade in the rendered page
                setTimeout(() => {
                    canvas.style.transition = 'all 0.3s ease';
                    canvas.style.opacity = '1';
                    canvas.style.transform = 'scale(1)';
                }, 50);
                
                currentPage = pageNumber;
                updatePageIndicator();
                updatePaginationButtons();
            });
        });
    }
    
    // Helper for updating page indicator text
    function updatePageIndicator() {
        if (pageIndicator) {
            pageIndicator.textContent = `Page ${currentPage} of ${totalPages}`;
        }
    }
    
    // Helper for enabling/disabling pagination buttons
    function updatePaginationButtons() {
        if (prevPage) {
            prevPage.disabled = currentPage <= 1;
            prevPage.classList.toggle('opacity-50', currentPage <= 1);
        }
        if (nextPage) {
            nextPage.disabled = currentPage >= totalPages;
            nextPage.classList.toggle('opacity-50', currentPage >= totalPages);
        }
    }
    
    // Handle page navigation
    if (prevPage && nextPage) {
        prevPage.addEventListener('click', function() {
            if (currentPage > 1) {
                renderPage(currentPage - 1);
            }
        });
        
        nextPage.addEventListener('click', function() {
            if (pdfInstance && currentPage < totalPages) {
                renderPage(currentPage + 1);
            }
        });
        
        // Add keyboard navigation
        document.addEventListener('keydown', function(e) {
            if (document.activeElement === userInput) return; // Don't navigate when typing
            
            if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
                if (currentPage > 1) {
                    renderPage(currentPage - 1);
                }
            } else if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
                if (pdfInstance && currentPage < totalPages) {
                    renderPage(currentPage + 1);
                }
            }
        });
    }

    // Zoom controls
    if (zoomIn) {
        zoomIn.addEventListener('click', function() {
            if (scale < 3.0) {
                scale += 0.2;
                if (pdfInstance) renderPage(currentPage);
            }
        });
    }

    if (zoomOut) {
        zoomOut.addEventListener('click', function() {
            if (scale > 0.5) {
                scale -= 0.2;
                if (pdfInstance) renderPage(currentPage);
            }
        });
        
        // Add mousewheel zoom with ctrl key
        pdfContent.addEventListener('wheel', function(e) {
            if (e.ctrlKey) {
                e.preventDefault();
                if (e.deltaY < 0) {
                    scale = Math.min(scale + 0.1, 3.0);
                } else {
                    scale = Math.max(scale - 0.1, 0.5);
                }
                renderPage(currentPage);
            }
        });
    }

    // Fullscreen toggle
    if (toggleFullscreen) {
        toggleFullscreen.addEventListener('click', function() {
            const pdfViewer = document.querySelector('.pdf-viewer');
            
            if (document.fullscreenElement) {
                document.exitFullscreen().then(() => {
                    toggleFullscreen.innerHTML = '<i class="fas fa-expand"></i>';
                });
            } else if (pdfViewer) {
                pdfViewer.requestFullscreen().then(() => {
                    toggleFullscreen.innerHTML = '<i class="fas fa-compress"></i>';
                });
            }
        });
        
        // Update icon when fullscreen changes by other means (like Escape key)
        document.addEventListener('fullscreenchange', function() {
            toggleFullscreen.innerHTML = document.fullscreenElement ? 
                '<i class="fas fa-compress"></i>' : '<i class="fas fa-expand"></i>';
        });
    }
    
    // Citation click handler with improved highlighting
    function setupCitationHandlers() {
        document.querySelectorAll('.citation').forEach(citation => {
            citation.addEventListener('click', function() {
                const page = parseInt(this.getAttribute('data-page'));
                if (pdfInstance && page && page <= pdfInstance.numPages) {
                    // Navigate to the cited page
                    renderPage(page);
                    
                    // Add highlight effect (to simulate finding the cited text)
                    setTimeout(() => {
                        const highlight = document.createElement('div');
                        highlight.className = 'pdf-page-highlight';
                        
                        // Position randomly on the page to simulate finding citation
                        const canvas = pdfContent.querySelector('canvas');
                        if (canvas) {
                            const width = Math.random() * (canvas.width * 0.5) + (canvas.width * 0.2);
                            const height = Math.random() * (canvas.height * 0.1) + 20;
                            const top = Math.random() * (canvas.height * 0.7) + (canvas.height * 0.1);
                            const left = Math.random() * (canvas.width * 0.3) + (canvas.width * 0.1);
                            
                            highlight.style.width = `${width}px`;
                            highlight.style.height = `${height}px`;
                            highlight.style.top = `${top}px`;
                            highlight.style.left = `${left}px`;
                            
                            // Create a container if needed
                            const container = pdfContent.querySelector('.pdf-highlights-container') || 
                                              document.createElement('div');
                            if (!pdfContent.contains(container)) {
                                container.className = 'pdf-highlights-container position-absolute top-0 left-0 w-100 h-100 pointer-events-none';
                                pdfContent.style.position = 'relative';
                                pdfContent.appendChild(container);
                            }
                            
                            container.appendChild(highlight);
                            
                            // Remove highlight after animation
                            setTimeout(() => {
                                highlight.remove();
                            }, 4000);
                        }
                    }, 300);
                }
            });
        });
    }

    // Chat functionality
    function sendMessage() {
        const message = userInput.value.trim();
        if (message === '' || isProcessing) return;
        
        // Set processing flag
        isProcessing = true;
        
        // Add user message to chat
        addMessage(message, 'user');
        
        // Store in history
        chatHistory.push({
            role: 'user',
            content: message
        });
        
        // Clear input
        userInput.value = '';
        
        // Show typing indicator
        const thinkingIndicator = document.createElement('div');
        thinkingIndicator.className = 'thinking';
        thinkingIndicator.innerHTML = `
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
        `;
        chatMessages.appendChild(thinkingIndicator);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // In a real app, you would send the message to your backend API
        // For now, we'll simulate a response after a delay
        setTimeout(() => {
            // Remove thinking indicator
            chatMessages.removeChild(thinkingIndicator);
            
            // Add bot response
            const responses = [
                "Based on the document, the company's revenue increased by 15% in Q2 2025 <span class='citation' data-page='2'>p.2</span>. This is primarily due to the launch of new product lines and expansion into Asian markets <span class='citation' data-page='5'>p.5</span>.",
                "I found that the project timeline has been extended to December 2025 <span class='citation' data-page='12'>p.12</span>. The delay is attributed to supply chain disruptions and regulatory challenges in European markets.",
                "According to the executive summary <span class='citation' data-page='1'>p.1</span>, this report focuses on sustainable growth initiatives. The company is committed to reducing carbon emissions by 30% by 2027 <span class='citation' data-page='8'>p.8</span> and investing in renewable energy for all manufacturing plants.",
                "The financial forecast indicates a potential 20% growth in profit margins over the next two fiscal years <span class='citation' data-page='15'>p.15</span>, assuming market conditions remain stable and the new strategic initiatives are implemented successfully."
            ];
            
            const randomResponse = responses[Math.floor(Math.random() * responses.length)];
            addMessage(randomResponse, 'bot');
            
            // Store in history
            chatHistory.push({
                role: 'assistant',
                content: randomResponse
            });
            
            // Setup citation handlers for the new message
            setupCitationHandlers();
            
            // Reset processing flag
            isProcessing = false;
        }, 2000);
    }
    
    // Add message to chat
    function addMessage(content, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;
        
        const now = new Date();
        const timeString = now.getHours().toString().padStart(2, '0') + ':' + 
                          now.getMinutes().toString().padStart(2, '0');
        
        let avatarIcon = type === 'user' ? 'user' : 'robot';
        
        messageDiv.innerHTML = `
            <div class="message-content">
                ${content}
            </div>
            <div class="message-time">
                ${timeString}
            </div>
            <div class="message-avatar">
                <i class="fas fa-${avatarIcon}"></i>
            </div>
        `;
        
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // Clear chat history
    function clearChatHistory() {
        // Remove all messages except the first welcome message
        const messages = chatMessages.querySelectorAll('.message');
        if (messages.length > 1) {
            for (let i = 1; i < messages.length; i++) {
                messages[i].remove();
            }
        }
        
        // Reset chat history array
        chatHistory = [{
            role: 'assistant',
            content: "Hello! I'm your PDF Assistant. Ask me anything about this document."
        }];
    }
    
    // Export chat history
    function exportChatHistoryToText() {
        let exportText = `PDF Chat Assistant - Conversation Export\nDocument: ${documentId}\nDate: ${new Date().toLocaleString()}\n\n`;
        
        chatHistory.forEach(msg => {
            const roleLabel = msg.role === 'user' ? 'You' : 'Assistant';
            
            // Strip HTML tags for clean text
            const cleanContent = msg.content.replace(/<\/?[^>]+(>|$)/g, '');
            exportText += `${roleLabel}: ${cleanContent}\n\n`;
        });
        
        // Create download link
        const blob = new Blob([exportText], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `chat-export-${documentId}-${new Date().toISOString().slice(0, 10)}.txt`;
        document.body.appendChild(a);
        a.click();
        
        // Clean up
        setTimeout(() => {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 0);
    }

    // Event listeners for chat actions
    if (sendButton) {
        sendButton.addEventListener('click', sendMessage);
    }
    
    if (userInput) {
        userInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    }
    
    if (clearChat) {
        clearChat.addEventListener('click', function() {
            if (confirm('Are you sure you want to clear the chat history?')) {
                clearChatHistory();
            }
        });
    }
    
    if (exportChat) {
        exportChat.addEventListener('click', exportChatHistoryToText);
    }
    
    if (attachFile) {
        attachFile.addEventListener('click', function() {
            alert('Attach file functionality would be implemented here');
            // In a real app, this would open a file picker
        });
    }

    // Responsive behavior
    window.addEventListener('resize', handleResponsiveLayout);
    handleResponsiveLayout();
    
    // Store PDF visibility preference for mobile
    if (togglePdfMobile) {
        togglePdfMobile.addEventListener('click', function() {
            window.localStorage.setItem('pdfHiddenOnMobile', !pdfViewerCol.classList.contains('d-none'));
        });
    }
    
    // Initialize
    setupCitationHandlers();
    
    // Initialize chat history with welcome message
    chatHistory.push({
        role: 'assistant',
        content: "Hello! I'm your PDF Assistant. Ask me anything about this document."
    });
    
    // Attempt to load PDF if PDF.js is available
    if (typeof pdfjsLib !== 'undefined') {
        // In a real app, this would load the actual document
        loadPdf();
    }
});
